define BLYNK_TEMPLATE_ID "TMPL3ar9jXHBE"

#define BLYNK_TEMPLATE_NAME "Milk Detection Using Sensors"

#define BLYNK_AUTH_TOKEN "yd7yD38Wgo-7nxEdaASne-YDHAQ6zlw0"


#include <OneWire.h>

#include <DallasTemperature.h>

#include <WiFi.h>

#include <BlynkSimpleEsp32.h>

#include <Arduino.h>






// Color sensor


#define S2 13

#define S3 12

#define sensorOut 14


// pH Sensor

#define pHSensorPin 34


// TDS Sensor

#define TdsSensorPin 35


// Temp Sensor

OneWire oneWire(27);

DallasTemperature sensors(&oneWire);


#define VREF 3.3

#define SCOUNT 30


#define TDS_THRESHOLD 650

#define PH_THRESHOLD 6.5

#define TEMPERATURE_THRESHOLD 4.0


const char* adulterantNames[] = {

  "Water",

  "Starch",

  "Urea",

  // Add more adulterants here

};


bool adulterantDetected[sizeof(adulterantNames) / sizeof(adulterantNames[0])] = {false};


int analogBuffer[SCOUNT];

int analogBufferIndex = 0;


float averageVoltage = 0;

float tdsValue = 0;

float temperature = 25;


int R_Min = 5;

int R_Max = 38;

int G_Min = 4;

int G_Max = 42;

int B_Min = 4;

int B_Max = 35;


char ssid[] = "Milk_Detection";

char pass[] = "12345678";


void setup() {

  Serial.begin(115200);

  delay(1000);


  WiFi.begin(ssid, pass);

  while (WiFi.status() != WL_CONNECTED) {

    delay(1000);

    Serial.println("Connecting to Wi-Fi...");

  }

  Serial.println("Connected to Wi-Fi!");

  delay(2000);

  Blynk.begin(BLYNK_AUTH_TOKEN, "Milk_Detection", "12345678");

  if (Blynk.connect()) {

  Serial.println("Connected to Blynk!");

  } else {

  Serial.println("Failed to connect to Blynk. Retrying...");

  }

  pinMode(S2, OUTPUT);

  pinMode(S3, OUTPUT);

  pinMode(sensorOut, INPUT);

  pinMode(TdsSensorPin, INPUT);


  sensors.begin();

  sensors.setResolution(12);

}


void loop() {

  if (!Blynk.connected()) {

    Serial.println("Reconnecting to Blynk...");

    connectBlynk();

  }


  float pHValue = analogRead(pHSensorPin);

  int redValue = getColorValue(S2, S3, R_Min, R_Max);

  int greenValue = getColorValue(S2, S3, G_Min, G_Max);

  int blueValue = getColorValue(S2, S3, B_Min, B_Max);


  sensors.requestTemperatures();

  float temperatureCelsius = sensors.getTempCByIndex(0);


  float voltage = pHValue * (5.0 / 4095.0);

  float ph = (5.0 * voltage) / 3.3;


  String phCategory;

  if (ph >= 0.0 && ph <= 6.5) {

    phCategory = "Base";

  } else if (ph > 6.5 && ph <= 7.9) {

    phCategory = "Neutral";

  } else if (ph > 7.9) {

    phCategory = "Acidic";

  } else {

    phCategory = "Unknown";

  }

  String milkType = "Other Color Detected";

  if (redValue >= 245 && greenValue >= 245 && blueValue >= 240 &&

      redValue <= 255 && greenValue <= 255 && blueValue <= 255) {

    milkType = "Buffalo Milk";

  } else if (redValue >= 230 && greenValue >= 230 and blueValue >= 220 &&

             redValue <= 244 and greenValue <= 244 and blueValue <= 239) {

    milkType = "Cow Milk";

  }


  static unsigned long analogSampleTimepoint = millis();

  if (millis() - analogSampleTimepoint > 40U) {

    analogSampleTimepoint = millis();

    analogBuffer[analogBufferIndex] = analogRead(TdsSensorPin);

    analogBufferIndex = (analogBufferIndex + 1) % SCOUNT;

  }


  static unsigned long printTimepoint = millis();

  if (millis() - printTimepoint > 800U) {

    printTimepoint = millis();

    float sum = 0;

    for (int i = 0; i < SCOUNT; i++) {

      sum += analogBuffer[i];

    }

    averageVoltage = sum / SCOUNT * (VREF / 4095.0);

    float compensationCoefficient = 1.0 + 0.02 * (temperature - 25.0);

    float compensationVoltage = averageVoltage / compensationCoefficient;

    tdsValue = (133.42 * compensationVoltage * compensationVoltage * compensationVoltage -

                255.86 * compensationVoltage * compensationVoltage +

                857.39 * compensationVoltage) *

               0.5;


    Serial.print("TDS Value: ");

    Serial.print(tdsValue, 0);

    Serial.println(" ppm");

  }

  String result="";

  if (tdsValue < 100  ) {

    Serial.println("Checking Results ...");

    result="Checking Results ..";

    Serial.println(".....");

      

  }

  if (tdsValue < 900  && tdsValue >100) {

    Serial.println("  Adulterants detected in milk:");

    result="Water ";

    Serial.println("Water");

      

  }

  else if (tdsValue > 900 && tdsValue < 1500)

  {

    Serial.println("Pure milk detected.");

    result="Pure milk detected.";

  }

  else if (tdsValue > 1500 && tdsValue < 2500)

  {

    Serial.println("  Adulterants detected in milk:");

    Serial.println("Starch");

    result="Starch";

  }


  else if (tdsValue > 1500 && tdsValue < 2500)

  {

    Serial.println("  Adulterants detected in milk:");

    Serial.println("Phenyl");

    result="Phenyl";

  }


  else if (tdsValue > 2500) // && tdsValue < 5000

  {

    Serial.println("  Adulterants detected in milk:");

    Serial.println("Urea");

    result="Urea";

  }

  

   else{

     result="Checking . . .";

  }

  // Rest of the code remains unchanged

  int rawValue = analogRead(pHSensorPin);

  float pHV = 0.0;

  // Convert the analog value to pH value

  //pHValue = analogToPH(rawValue);

  pHV = map(rawValue, 0, 4095, 0, 14); 

  Serial.println(pHV);


    float purity_percentage = ((1 - (tdsValue / 1500)) * 100);


  Blynk.virtualWrite(V0, ph);

  Blynk.virtualWrite(V2, temperatureCelsius);

  Blynk.virtualWrite(V3, milkType);

  Blynk.virtualWrite(V1, phCategory);

  Blynk.virtualWrite(V5, tdsValue);

  Blynk.virtualWrite(V4, result);

  Blynk.virtualWrite(V6, purity_percentage);


  // Print statements remain unchanged

  Serial.print("pH Value: ");

  Serial.print(ph);

  Serial.print("    ");

  Serial.print("Temperature (C): ");

  Serial.print(temperatureCelsius);

  Serial.print("    ");

  Serial.print("Red = ");

  Serial.print(redValue);

  Serial.print("    ");

  Serial.print("Green = ");

  Serial.print(greenValue);

  Serial.print("    ");

  Serial.print("Blue = ");

  Serial.println(blueValue);

  Serial.print("    ");

  Serial.print("Milk Type = ");

  Serial.println(milkType);

  Serial.print("    ");

  Serial.print("pH Category = ");

  Serial.println(phCategory);

  Serial.print("    ");

  Serial.print(" Purity of Milk = ");

  Serial.println(purity_percentage);

  Serial.print(" %");

  Serial.print("    ");

  Serial.print("---------------------------------------------------------------------------------------------------------------------------------------- ");

  Serial.println("    ");

  delay(3000);

}


int getColorValue(int s2Pin, int s3Pin, int minValue, int maxValue) {

  digitalWrite(s2Pin, LOW);

  digitalWrite(s3Pin, LOW);

  int frequency = pulseIn(sensorOut, LOW);

  int mappedValue = map(frequency, minValue, maxValue, 255, 0);

  return mappedValue;

}


void connectBlynk() {

  if (!Blynk.connect()) {

    Serial.println("Failed to connect to Blynk. Retrying...");

  }

}